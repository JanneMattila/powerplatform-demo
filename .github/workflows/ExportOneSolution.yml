name: Export One Solution (Worker)
run-name: 'Export ${{ inputs.solution_group }} -> ${{ inputs.app_name }}'

on:
  workflow_dispatch:
    inputs:
      solution_group:
        description: 'Solution group name'
        required: true
        type: string
      app_name:
        description: 'App name to export'
        required: true
        type: string
      branch_name:
        description: 'Branch name for export'
        required: true
        type: string

permissions:
  contents: write

jobs:
  ExportOneSolution:
    environment: Development
    name: Export ${{ inputs.solution_group }} -> ${{ inputs.app_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v5.0.0
        with:
          ref: ${{ inputs.branch_name }}
          fetch-depth: 0
        env:
          GIT_LFS_SKIP_SMUDGE: 1

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1
        with:
          add-tools-to-path: true

      - name: Get current solution version and auto-increment
        id: version
        run: |
          pac auth create \
            --url "${{ secrets.ENVIRONMENT_URL }}" \
            --applicationId "${{ secrets.CLIENT_ID }}" \
            --clientSecret "${{ secrets.CLIENT_SECRET }}" \
            --tenant "${{ secrets.TENANT_ID }}"

            # Query current solution version
          SOLUTION_LIST=$(pac solution list)
          
          # Parse the table output to find the solution and extract version
          # Table format: Unique Name | Friendly Name | Version | Managed
          CURRENT_VERSION=$(echo "$SOLUTION_LIST" | grep "^${{ inputs.app_name }}\s" | awk '{print $3}')
          
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not find solution '${{ inputs.app_name }}'"
            exit 1
          fi
          
          echo "Current solution version: $CURRENT_VERSION"
          
          # Parse version components (e.g., 1.0.0.5 -> 1 0 0 5)
          IFS='.' read -r MAJOR MINOR BUILD REVISION <<< "$CURRENT_VERSION"
          
          # Handle cases where version might be incomplete (e.g., "1.0" instead of "1.0.0.0")
          MAJOR=${MAJOR:-1}
          MINOR=${MINOR:-0}
          BUILD=${BUILD:-0}
          REVISION=${REVISION:-0}
          
          # Increment revision number
          NEW_REVISION=$((REVISION + 1))
          NEW_VERSION="$MAJOR.$MINOR.$BUILD.$NEW_REVISION"
          
          echo "New solution version: $NEW_VERSION"
          pac solution online-version --solution-name "${{ inputs.app_name }}" --solution-version "$NEW_VERSION"

      # =================================================
      # Other versioning options
      # =================================================
      # - name: Create version number
      #   id: version
      #   run: |

      #     # Option 1:
      #     # TIMESTAMP=$(date -u +"%Y.%m.%d")
      #     # SOLUTION_VERSION="$TIMESTAMP.$GITHUB_RUN_NUMBER"

      #     # Option 2:
      #     # Reference date: 2025-01-01
      #     REFERENCE_DATE="2025-01-01"
      #     CURRENT_DATE=$(date -u +"%Y-%m-%d")
          
      #     # Convert dates to seconds since epoch
      #     REFERENCE_SECONDS=$(date -d "$REFERENCE_DATE" +%s)
      #     CURRENT_SECONDS=$(date -d "$CURRENT_DATE" +%s)
          
      #     # Calculate total days difference
      #     TOTAL_DAYS=$(( (CURRENT_SECONDS - REFERENCE_SECONDS) / 86400 ))
          
      #     # Calculate year, month, and day deltas
      #     YEAR_DELTA=$(( (TOTAL_DAYS / 365) + 1 ))
      #     REMAINING_DAYS=$(( TOTAL_DAYS % 365 ))
      #     MONTH_DELTA=$(( REMAINING_DAYS / 30 ))
      #     DAY_DELTA=$(( REMAINING_DAYS % 30 ))
          
      #     SOLUTION_VERSION="$YEAR_DELTA.$MONTH_DELTA.$DAY_DELTA.$GITHUB_RUN_NUMBER"
          
      #     echo "Reference date: $REFERENCE_DATE"
      #     echo "Current date: $CURRENT_DATE"
      #     echo "Total days difference: $TOTAL_DAYS"
      #     echo "Version components: Year=$YEAR_DELTA, Month=$MONTH_DELTA, Day=$DAY_DELTA, Run=$GITHUB_RUN_NUMBER"
      #     echo "Generated solution version: $SOLUTION_VERSION"
      #     echo "solution=$SOLUTION_VERSION" >> $GITHUB_OUTPUT

      # - name: Set solution version
      #   uses: microsoft/powerplatform-actions/set-online-solution-version@v1
      #   with:
      #     environment-url: ${{ secrets.ENVIRONMENT_URL }}
      #     app-id: ${{ secrets.CLIENT_ID }}
      #     client-secret: ${{ secrets.CLIENT_SECRET }}
      #     tenant-id: ${{ secrets.TENANT_ID }}
      #     solution-name: ${{ inputs.app_name }}
      #     version: ${{ steps.version.outputs.solution }}

      - name: Export unmanaged solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ inputs.app_name }}
          solution-output-file: '${{ inputs.solution_group }}/${{ inputs.app_name }}_unmanaged.zip'
          working-directory: './SolutionGroups/'
          overwrite: true
          managed: false

      - name: Export managed solution
        uses: microsoft/powerplatform-actions/export-solution@v1
        with:
          environment-url: ${{ secrets.ENVIRONMENT_URL }}
          app-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          solution-name: ${{ inputs.app_name }}
          solution-output-file: '${{ inputs.solution_group }}/${{ inputs.app_name }}.zip'
          working-directory: './SolutionGroups/'
          overwrite: true
          managed: true

      - name: Create export metadata file
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          METADATA_FILE="./SolutionGroups/${{ inputs.solution_group }}/${{ inputs.app_name }}.md"
          
          echo "Creating metadata file: $METADATA_FILE"
          
          cat > "$METADATA_FILE" << EOF
          # Export Metadata
          
          **Solution:** ${{ inputs.app_name }}

          **Solution Group:** ${{ inputs.solution_group }}

          **Exported:** $TIMESTAMP

          **Exported by:** ${{ github.actor }}

          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Branch:** ${{ inputs.branch_name }}
          EOF
          
          echo "Metadata file created successfully"

      - name: Commit changes
        run: |
          BRANCH_NAME="${{ inputs.branch_name }}"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          echo "Committing changes for export of ${{ inputs.solution_group }} -> ${{ inputs.app_name }}"
          
          git add .
            
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit the changes first
            git commit -m "Export of ${{ inputs.solution_group }} -> ${{ inputs.app_name }} - Updated by ${{ github.actor }}"
            
            # Retry logic for push conflicts
            MAX_RETRIES=5
            RETRY_COUNT=0
            RETRY_DELAY=5
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES to push changes"
              
              # Try to push
              if git push origin "$BRANCH_NAME"; then
                echo "Changes pushed successfully to branch '$BRANCH_NAME'"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, pulling latest changes and retrying..."
                  
                  # Pull with rebase to get latest changes
                  if git pull --rebase origin "$BRANCH_NAME"; then
                    echo "Rebased successfully, waiting $RETRY_DELAY seconds before retry..."
                    sleep $RETRY_DELAY
                    RETRY_DELAY=$((RETRY_DELAY + 5))  # Exponential backoff
                  else
                    echo "Rebase failed, trying to abort and continue..."
                    git rebase --abort || true
                    sleep $RETRY_DELAY
                    RETRY_DELAY=$((RETRY_DELAY + 5))
                  fi
                else
                  echo "Failed to push after $MAX_RETRIES attempts"
                  exit 1
                fi
              fi
            done
          fi
